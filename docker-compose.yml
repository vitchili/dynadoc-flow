version: "3.8"

services:
  # USER SERVICE
  user-app:
    build: ./backend/user-service
    container_name: user-app
    depends_on:
      - mysql-db
    environment:
      DB_HOST: mysql-db
      DB_PORT: 3306
      DB_DATABASE: user_service
      DB_USERNAME: root
      DB_PASSWORD: root
    volumes:
      - ./backend/user-service:/var/www/html
    networks:
      - laravel-net

  # TEMPLATE SERVICE
  template-app:
    build: ./backend/template-service
    container_name: template-app
    depends_on:
      - mysql-db
    environment:
      DB_HOST: mysql-db
      DB_PORT: 3306
      DB_DATABASE: template_service
      DB_USERNAME: root
      DB_PASSWORD: root
    volumes:
      - ./backend/template-service:/var/www/html
    networks:
      - laravel-net

  # FILE SERVICE
  file-app:
    build: ./backend/file-service
    container_name: file-app
    depends_on:
      - mysql-db
    environment:
      DB_HOST: mysql-db
      DB_PORT: 3306
      DB_DATABASE: file_service
      DB_USERNAME: root
      DB_PASSWORD: root
    volumes:
      - ./backend/file-service:/var/www/html
    networks:
      - laravel-net

  # DATABASE
  mysql-db:
    image: mysql:8
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3306:3306"
    networks:
      - laravel-net

  user-nginx:
    image: nginx:alpine
    container_name: user-nginx
    ports:
      - "8081:80"
    volumes:
      - ./backend/user-service:/var/www/html
      - ./.docker/nginx/user.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - user-app
    networks:
      - laravel-net

  template-nginx:
    image: nginx:alpine
    container_name: template-nginx
    ports:
      - "8082:80"
    volumes:
      - ./backend/template-service:/var/www/html
      - ./.docker/nginx/template.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - template-app
    networks:
      - laravel-net

  file-nginx:
    image: nginx:alpine
    container_name: file-nginx
    ports:
      - "8083:80"
    volumes:
      - ./backend/file-service:/var/www/html
      - ./.docker/nginx/file.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - file-app
    networks:
      - laravel-net

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - laravel-net

  # KAFKA STACK
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - laravel-net

  kafka1:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
    networks:
      - laravel-net

  kafka2:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
    networks:
      - laravel-net

  kafka3:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka3
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
    networks:
      - laravel-net

  kafka-init:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka-init
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    volumes:
      - ./.docker/kafka/entrypoint.sh:/entrypoint.sh
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    networks:
      - laravel-net

  kong-db:
    image: postgres:15
    container_name: kong-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong-db-data:/var/lib/postgresql/data
    networks:
      - laravel-net

  kong:
    image: kong:3.6
    container_name: kong
    restart: unless-stopped
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000" # proxy (http)
      - "8443:8443" # proxy (https)
      - "8001:8001" # admin API (http)
      - "8444:8444" # admin API (https)
    volumes:
      - ./.docker/kong/jwt-public.pem:/etc/kong/jwt-public.pem:ro
    networks:
      - laravel-net
    command: >
      sh -c "
        kong migrations bootstrap ||
        (kong migrations up && kong migrations finish) &&
        kong start --vv
      "

  kong-initializer:
    image: curlimages/curl:7.83.1
    container_name: kong-init
    command: /kong-init.sh
    volumes:
      - ./.docker/kong/kong-init.sh:/kong-init.sh
      - ./.docker/kong/jwt-public.pem:/jwt-public.pem:ro
    depends_on:
      - kong
      - user-nginx
    networks:
      - laravel-net
    restart: on-failure

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - HOST=0.0.0.0
      - PORT=5173
    networks:
      - laravel-net

  localstack:
    image: localstack/localstack:4.7.0
    container_name: localstack
    environment:
      - AWS_DEFAULT_REGION=us-east-1
      - SERVICES=s3
      - GATEWAY_LISTEN=0.0.0.0:4566
      - PERSISTENCE=true
    ports:
      - "4566-4583:4566-4583"
    volumes:
      - ./.docker/aws/localstack-data:/var/lib/localstack/state
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.docker/aws/localstack-init:/etc/localstack/init/ready.d
    networks:
      - laravel-net

networks:
  laravel-net:
    driver: bridge

volumes:
  kong-db-data:
